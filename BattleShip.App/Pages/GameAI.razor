@page "/PlayervsIA"
@using Battleship.Models
@inject HttpClient HttpClient

<link rel="stylesheet" href="css/home.css">
<link rel="stylesheet" href="css/grid.css">

<a href="/" class="back-btn">Menu</a>

<div class="grid-container-player" id="playerGrid">
    @for (int row = 0; row < 10; row++)
    {
        for (int col = 0; col < 10; col++)
        {
            var isOccupied = IsCellOccupied(model.BoatList, row, col);
            <div class="grid-cell-player @GetOccupiedCssClass(isOccupied)" @onclick="() => HandleCellClick('Player', row, col)"></div>
        }
    }
</div>

<div class="grid-container-ia" id="iaGrid">
    @for (int row = 0; row < 10; row++)
    {
        for (int col = 0; col < 10; col++)
        {
            <div class="grid-cell-ia" @onclick="() => HandleCellClick('IA', row, col)"></div>
        }
    }
</div>

@code{
     private StartGameAIResponse model;
    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("http://localhost:5282/StartGameAI");
        var model = await response.Content.ReadFromJsonAsync<StartGameAIResponse>();
        if (model != null)
        {
            var gameId = model.GameId;
            var playerId = model.PlayerId;
            var boatList = model.BoatList;
        }
    }

    private void HandleCellClick(char grid, int row, int col)
    {
        Console.WriteLine($"Clicked on {grid} grid at row: {row}, col: {col}");
    }

        private bool IsCellOccupied(Boat[] boats, int row, int col)
    {
        return boats.Any(boat => boat.Position.X <= col && col < boat.Position.X  + boat.Size && boat.Position.Y <= row && row < boat.Position.Y + 1);
    }

    private string GetOccupiedCssClass(bool isOccupied)
    {
        return isOccupied ? "grid-cell-occupied" : string.Empty;
    }
}