@page "/PlayervsIA"
@using Battleship.Models
@using System.Net.Http.Json;
@inject HttpClient HttpClient

<link rel="stylesheet" href="css/home.css">
<link rel="stylesheet" href="css/grid.css">

<a href="/" class="back-btn">Menu</a>
<!--<a href="/PlayervsIA" class="game-again-btn">New Game</a>-->

<div class="grid-container-player" id="playerGrid">
    @if (model != null)
    {
        @for (int row = 0; row < 10; row++)
        {
            for (int col = 0; col < 10; col++)
            {
                var boat = GetBoatAtPosition(model.BoatList, row, col);
                var isOccupied = boat != null;

                <div class="grid-cell-player @GetOccupiedCssClass(isOccupied)" @onclick="() => HandleCellClick(row, col)">
                    @if (isOccupied)
                    {
                        <span class="boat-name">@boat.Name</span>
                    }
                </div>
            }
        }
    }
</div>

<div class="grid-container-ia" id="iaGrid">
    @for (int row = 0; row < 10; row++)
    {
         for (int col = 0; col < 10; col++)
        {
            <div class="grid-cell-ia" @onclick="() => HandleCellClick(row, col)"></div>
        }
    }
</div>

@code{
    private StartGameAIResponse model;
    private ShootResponse shoot;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("http://localhost:5282/StartGameAI");
        model = await response.Content.ReadFromJsonAsync<StartGameAIResponse>();
    }

    protected async Task HandleCellClick(int row, int col)
    {
        var shootData = new
        {
            X = row,
            Y = col
        };

        var response = await HttpClient.PostAsJsonAsync("http://localhost:5282/shoot", shootData);
        shoot = await response.Content.ReadFromJsonAsync<ShootResponse>();

        Console.WriteLine($"Clicked at row: {row}, col: {col}");
    }

    private Boat GetBoatAtPosition(Boat[] boats, int row, int col)
    {
        return boats.FirstOrDefault(boat => 
            boat.Position.X <= col && col < boat.Position.X + boat.Size &&
            boat.Position.Y <= row && row < boat.Position.Y + 1
        );
    }

    private string GetOccupiedCssClass(bool isOccupied)
    {
        return isOccupied ? "grid-cell-occupied" : string.Empty;
    }
}