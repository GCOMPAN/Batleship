@page "/PlayervsIA"
@using Battleship.Models
@using System.Net.Http.Json;
@inject HttpClient HttpClient

<link rel="stylesheet" href="css/home.css">
<link rel="stylesheet" href="css/grid.css">

<a href="/" class="back-btn">Menu</a>
<!--<a href="/PlayervsIA" class="game-again-btn">New Game</a>-->

<div class="grid-container-player" id="playerGrid">
    @if (model != null)
    {
        @for (int col = 0; col < 10; col++)
        {
            for (int row = 0; row < 10; row++)
            {
                var boat = GetBoatAtPosition(model.BoatList, col, row);
                var isOccupied = boat != null;
                var cellState = playerGrid[col, row]; // Assuming you have a mechanism like this in place
                var clickRow=row;
                var clickCol=col;

                <div class="grid-cell-player @(GetCellCssClass(cellState, isOccupied))" @onclick="() => HandleCellClick(clickCol, clickRow)">
                    @if (isOccupied && cellState == CellState.Untouched)
                    {
                        <span class="boat-name">@boat.Name</span>
                    }
                    else if (cellState == CellState.Hit)
                    {
                        <span class="hit-indicator">X</span> @* Example hit indicator *@
                    }
                </div>
            }
        }
    }
</div>


<div class="grid-container-ia" id="iaGrid">
    @for (int col = 0; col < 10; col++)
    {
        for (int row = 0; row < 10; row++)
        {
            var clickRow = row;
            var clickCol = col;
            var cellState = opponentGrid[col, row];
            <div class="grid-cell-ia @GetCellCssClass(cellState, false)" 
                 @onclick="() => HandleCellClick(clickCol, clickRow)">
            </div>
        }
    }
</div>


@code {
    private StartGameAIResponse model;
    private ShootResponse shootModel;
    private CellState[,] opponentGrid = new CellState[10, 10];
    private CellState[,] playerGrid = new CellState[10, 10];
    private List<Boat> playerBoats = new List<Boat>();

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("http://localhost:5282/StartGameAI");
        model = await response.Content.ReadFromJsonAsync<StartGameAIResponse>();

        // Initialize playerBoats based on the model.BoatList
        playerBoats = model.BoatList.ToList();
    }

    private async void HandleCellClick(int col, int row)
    {
        Console.WriteLine($"Clicked at col: {col + 1}, row: {row + 1}");
        
        // Check if the cell has already been interacted with
        if (opponentGrid[col, row] != CellState.Untouched) return;
        
        var position = new Position (col, row ); // Ensure Position is correctly instantiated
        var jsonContent = JsonContent.Create(position);
        var response = await HttpClient.PostAsync("http://localhost:5282/Shoot", jsonContent);
        shootModel = await response.Content.ReadFromJsonAsync<ShootResponse>();
        if(shootModel.IAShootSink) Console.WriteLine(shootModel);
        
        // Update the opponentGrid based on the shoot result
        opponentGrid[col, row] = shootModel.Hit ? CellState.Hit : CellState.Miss;
        
        // Update the player's grid based on the AI's shoot result
        var aiCol = shootModel.IAShootPosition.X;
        var aiRow = shootModel.IAShootPosition.Y;
        playerGrid[aiCol, aiRow] = shootModel.IAShootHit ? CellState.Hit : CellState.Miss;
        
        StateHasChanged();
    }

    private Boat GetBoatAtPosition(IEnumerable<Boat> boats, int col, int row)
    {
        return boats.FirstOrDefault(boat => boat.IsHit(new Position(col, row)));
    }


    // Adjusted GetCellCssClass method to correct the typo
    private string GetCellCssClass(CellState cellState, bool isOccupied)
    {
        return cellState switch
        {
            CellState.Hit => "grid-cell-hit",
            CellState.Miss => "grid-cell-miss",
            _ => isOccupied ? "grid-cell-occupied" : "grid-cell-untouched"
        };
    }

}
