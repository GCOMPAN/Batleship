@page "/PlayervsIA"
@using Battleship.Models
@using System.Net.Http.Json;
@inject HttpClient HttpClient
<link rel="stylesheet" href="css/home.css">
<link rel="stylesheet" href="css/grid.css">
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link href="https://fonts.cdnfonts.com/css/pirates" rel="stylesheet">

<a href="/" class="back-btn">Menu</a>

@if (winner != "")
{
    <div class="modal">
        <div class="modal-content">
            <span class="close-btn" @onclick="CloseModal">&times;</span>
            <p>The Winner is : <span style="color:@(winner == "IA" ? "red" : "blue");">@winner</span></p>
        </div>
    </div>

}

<div class="@(hardModeState ? "grid-hard-container-player" : "grid-container-player")" id="playerGrid">
    @if (model != null)
  
    {
        @for (int col = 0; col < gridSize; col++)   
        {
            for (int row = 0; row < gridSize; row++)
            {
                var boat = GetBoatAtPosition(model.BoatList, col, row);
                var isOccupied = boat != null;
                var cellState = playerGrid[col, row];
                var clickRow=row;
                var clickCol=col;

                <div class="@(hardModeState ? "grid-hard-cell-player" : "grid-cell-player") @(GetCellCssClass(cellState, isOccupied))" @onclick="() => HandleCellClick(clickCol, clickRow)">
                    @if (isOccupied && cellState == CellState.Untouched)
                    {
                        <span class="boat-name">@boat.Name</span>
  
                    }
                    else if (cellState == CellState.Hit)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
                            <path fillRule="evenodd" d="M12.963 2.286a.75.75 0 0 0-1.071-.136 9.742 9.742 0 0 0-3.539 6.176 7.547 7.547 0 0 1-1.705-1.715.75.75 0 0 0-1.152-.082A9 9 0 1 0 15.68 4.534a7.46 7.46 0 0 1-2.717-2.248ZM15.75 14.25a3.75 3.75 0 1 1-7.313-1.172c.628.465 1.35.81 2.133 1a5.99 5.99 0 0 1 1.925-3.546 3.75 3.75 0 0 1 3.255 3.718Z" clipRule="evenodd" />
                        </svg>
                    }
                    else if (cellState == CellState.Sunk)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M6 18 18 6M6 6l12 12" />
                        </svg>
                    }
                </div>
            }
        }
    }
</div>
<div class="controls">
    <label>Random Boat Position</label>
    <input type="checkbox" @bind="randomPlacement" />
    <label>Hard mode</label>
    <input type="checkbox" @bind="hardMode" />
    <label for="username">Username:</label> <!-- Add this line -->
    <input type="text" id="username" @bind="userName"> <!-- Add this line -->
    <button @onclick="OnNewGameClick" class="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">New Game</button>
</div>
<div class="@(hardModeState ? "grid-hard-container-ia" : "grid-container-ia")" id="iaGrid">
    @for (int col = 0; col < gridSize; col++)
    {
        for (int row = 0; row < gridSize; row++)
        {
            var clickRow = row;
            var clickCol = col;
            var cellState = opponentGrid[col, row];

            <div class="@(hardModeState ? "grid-hard-cell-ia" : "grid-cell-ia") @GetCellCssClass(cellState, false)"
                 @onclick="() => HandleCellClick(clickCol, clickRow)">
                @if (cellState == CellState.Hit)
                {
 
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
                        <path fillRule="evenodd" d="M12.963 2.286a.75.75 0 0 0-1.071-.136 9.742 9.742 0 0 0-3.539 6.176 7.547 7.547 0 0 1-1.705-1.715.75.75 0 0 0-1.152-.082A9 9 0 1 0 15.68 4.534a7.46 7.46 0 0 1-2.717-2.248ZM15.75 14.25a3.75 3.75 0 1 1-7.313-1.172c.628.465 1.35.81 2.133 1a5.99 5.99 0 0 1 1.925-3.546 3.75 3.75 0 0 1 3.255 3.718Z" clipRule="evenodd" />
                    </svg>
                }
                else if (cellState == CellState.Sunk)
                {
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M6 18 18 6M6 6l12 12" />
                    </svg>
                }
            </div>
        }   
    }
</div>
@code {
    private int gridSize = 10;
    private StartGameAIResponse model;
    private ShootResponse shootModel;
    private CellState[,] opponentGrid = new CellState[10, 10];
    private CellState[,] playerGrid = new CellState[10, 10];
    private List<Boat> playerBoats = new List<Boat>();
    
    private string userName;
    private bool randomPlacement = true;
    private bool hardMode = false;
    private bool hardModeState = false;
    private string winner = "";
    protected async Task OnNewGameClick()
    {
        gridSize = hardMode ? 15 : 10;
        hardModeState = hardMode;
        opponentGrid = new CellState[gridSize, gridSize];
        playerGrid = new CellState[gridSize, gridSize];
        if (randomPlacement)
        {
            var url = $"http://localhost:5282/StartGameAI?playerPlacement={randomPlacement}&hardMode={hardMode}&userName={Uri.EscapeDataString(userName)}";
            var response = await HttpClient.GetAsync(url);
            model = await response.Content.ReadFromJsonAsync<StartGameAIResponse>();
            // Initialize playerBoats based on the obtained model.BoatList
            playerBoats = model.BoatList.ToList();
        }
        else
        {
            var boats = new Boat[]
            {
                new Boat('A', 1),
                new Boat('B', 2),
                new Boat('C', 3),
                new Boat('D', 4),
                new Boat('E', 4),
                new Boat('F', 4),
                new Boat('G', 4),
            };
        }
        // Update game grids here if necessary
        StateHasChanged(); // Refresh the UI
    }
    private async void HandleCellClick(int col, int row)
    {
        StateHasChanged();
        Console.WriteLine($"Clicked at col: {col + 1}, row: {row + 1}"); 
        
        // Check if the cell has already been interacted with
        if (opponentGrid[col, row] != CellState.Untouched) return;
        
        var position = new Position (col, row ); // Ensure Position is correctly instantiated
        var jsonContent = JsonContent.Create(position);
        var response = await HttpClient.PostAsync("http://localhost:5282/Shoot", jsonContent);
        shootModel = await response.Content.ReadFromJsonAsync<ShootResponse>();

        // Verify the win condition
        if(shootModel.IAWon){
            winner = "IA";
        }
        if(shootModel.PlayerWon)
        {
            winner = userName;
        }

        // Update the opponentGrid based on the shoot result
        var x = shootModel.X;

  
        var y = shootModel.Y;
        opponentGrid[x, y] = shootModel.Hit ? CellState.Hit : CellState.Miss;

        // Update the player's grid based on the AI's shoot result
        var aiCol = shootModel.IAShootPosition.X;
        var aiRow = shootModel.IAShootPosition.Y;
        playerGrid[aiCol, aiRow] = shootModel.IAShootHit ? CellState.Hit : CellState.Miss;

        // Verify if the boat Hit is Sunk and if yes, we change the state of all the boat
        if(shootModel.IAShootSink){
            Console.WriteLine($"IA Sink ? {shootModel.IAShootSink}");
            UpdateBoatState(shootModel.IASunkBoat, playerGrid);
        }
        else if(shootModel.Sink){
            Console.WriteLine($"IA Sink ? {shootModel.IAShootSink}");
            UpdateBoatState(shootModel.SunkBoat, opponentGrid);
        }
        StateHasChanged();
    }

    // Initialize de boats positions to draw it
    private Boat GetBoatAtPosition(IEnumerable<Boat> boats, int col, int row)
    {
        return boats.FirstOrDefault(boat => boat.IsHit(new Position(col, row)));
    }

    private void UpdateBoatState(Boat boat, CellState[,] grid)
    {
        bool isSunk = true;
        foreach (var position in GetPositions(boat))
        {
            if (grid[position.X, position.Y] != CellState.Hit)
            {
                isSunk = false;
                break;
            }
        }
        if (isSunk)
        {
            foreach (var position in GetPositions(boat))
            {
                grid[position.X, position.Y] = CellState.Sunk;
            }
        }
    }

    // Calculate all the case of the boat with the start case
    private Position[] GetPositions(Boat boat)
    {
        // Initialize a list to hold positions
  
        List<Position> positions = new List<Position>();
        // Add the starting position
        positions.Add(boat.Position);
        // Loop to add the rest of the positions based on the boat's size
        for (int i = 1; i < boat.Size; i++)
        {
            if (boat.Facing == "E")
            {
                positions.Add(new Position(boat.Position.X + i, boat.Position.Y));
            }
            else
            {
                positions.Add(new Position(boat.Position.X, boat.Position.Y + i));
            }
        }
        return positions.ToArray();
    }

    private string GetCellCssClass(CellState cellState, bool isOccupied)
    {
        return cellState switch
  
        {
            CellState.Hit => "grid-cell-hit",
            CellState.Miss => "grid-cell-miss",
            CellState.Sunk => "grid-cell-sunk",
            _ => isOccupied ? "grid-cell-occupied" : "grid-cell-untouched"
        };
    }
    private void CloseModal()
    {
        winner = ""; // Clear the winner to close the modal
    }
}